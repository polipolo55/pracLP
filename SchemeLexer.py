# Generated from Scheme.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,113,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,5,15,79,8,15,10,15,12,15,82,9,
        15,1,15,1,15,1,16,1,16,5,16,88,8,16,10,16,12,16,91,9,16,1,17,4,17,
        94,8,17,11,17,12,17,95,1,18,4,18,99,8,18,11,18,12,18,100,1,18,1,
        18,1,19,1,19,5,19,107,8,19,10,19,12,19,110,9,19,1,19,1,19,0,0,20,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,6,3,0,10,10,13,13,
        34,34,4,0,63,63,65,90,95,95,97,122,5,0,48,57,63,63,65,90,95,95,97,
        122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,117,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,
        43,1,0,0,0,5,45,1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,51,1,0,0,0,
        13,53,1,0,0,0,15,55,1,0,0,0,17,58,1,0,0,0,19,61,1,0,0,0,21,63,1,
        0,0,0,23,66,1,0,0,0,25,68,1,0,0,0,27,70,1,0,0,0,29,73,1,0,0,0,31,
        76,1,0,0,0,33,85,1,0,0,0,35,93,1,0,0,0,37,98,1,0,0,0,39,104,1,0,
        0,0,41,42,5,39,0,0,42,2,1,0,0,0,43,44,5,40,0,0,44,4,1,0,0,0,45,46,
        5,41,0,0,46,6,1,0,0,0,47,48,5,42,0,0,48,8,1,0,0,0,49,50,5,47,0,0,
        50,10,1,0,0,0,51,52,5,43,0,0,52,12,1,0,0,0,53,54,5,45,0,0,54,14,
        1,0,0,0,55,56,5,62,0,0,56,57,5,61,0,0,57,16,1,0,0,0,58,59,5,60,0,
        0,59,60,5,61,0,0,60,18,1,0,0,0,61,62,5,61,0,0,62,20,1,0,0,0,63,64,
        5,60,0,0,64,65,5,62,0,0,65,22,1,0,0,0,66,67,5,62,0,0,67,24,1,0,0,
        0,68,69,5,60,0,0,69,26,1,0,0,0,70,71,5,35,0,0,71,72,5,116,0,0,72,
        28,1,0,0,0,73,74,5,35,0,0,74,75,5,102,0,0,75,30,1,0,0,0,76,80,5,
        34,0,0,77,79,8,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,78,1,0,0,0,80,
        81,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,5,34,0,0,84,32,1,0,
        0,0,85,89,7,1,0,0,86,88,7,2,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,
        1,0,0,0,89,90,1,0,0,0,90,34,1,0,0,0,91,89,1,0,0,0,92,94,7,3,0,0,
        93,92,1,0,0,0,94,95,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,36,1,
        0,0,0,97,99,7,4,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,
        100,101,1,0,0,0,101,102,1,0,0,0,102,103,6,18,0,0,103,38,1,0,0,0,
        104,108,5,59,0,0,105,107,8,5,0,0,106,105,1,0,0,0,107,110,1,0,0,0,
        108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,0,110,108,1,0,0,0,
        111,112,6,19,0,0,112,40,1,0,0,0,6,0,80,89,95,100,108,1,6,0,0
    ]

class SchemeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    TRUE = 14
    FALSE = 15
    STRING = 16
    IDENTIFIER = 17
    NUMBER = 18
    WS = 19
    COMMENT = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'''", "'('", "')'", "'*'", "'/'", "'+'", "'-'", "'>='", "'<='", 
            "'='", "'<>'", "'>'", "'<'", "'#t'", "'#f'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "STRING", "IDENTIFIER", "NUMBER", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "TRUE", 
                  "FALSE", "STRING", "IDENTIFIER", "NUMBER", "WS", "COMMENT" ]

    grammarFileName = "Scheme.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


